/*
 * Contains all classes pertaining to the GUI
 */
package GUI;

//imports
import Files.*;
import java.util.HashMap;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import PanelLinking.SendChangeSignal;

/**
 * Contains the panel which allows you to create and delete accounts
 *
 * @author Richard Tu
 */
public class AccountManagementPanel extends javax.swing.JPanel {

    HashMap<String, Account> HashOfAccounts;
    SendChangeSignal updatePanels;
    CharSequence checkChar1;
    CharSequence checkChar2;

    /**
     * Creates new form AccountManagement
     *
     * @param updatePanels - allows AccountManagement to update the account
     * setter and the leader boards
     */
    public AccountManagementPanel(SendChangeSignal updatePanels) {
        initComponents();
        checkChar1 = "&";
        checkChar2 = "<";
        //loads a HashMap of the file to the panel
        HashOfAccounts = FileManipFunctions.GetAccountHashMap();

        //updates the options in the comboBox
        updateComboBox();

        //sets updatePanels to a copy from ControlPanel and adds a PropertyChangeListener
        this.updatePanels = updatePanels;
        updatePanels.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent pce) {
                ;
            }
        });
    }

    /**
     * updates the options for the comboBox
     */
    void updateComboBox() {
        //gets a new list from the file
        HashOfAccounts = FileManipFunctions.GetAccountHashMap();

        //gets a list of filtered names in alphabetical order
        Account[] organizedListOfAccounts = SortSearchFunctions.nameFinder(InputFilter.getText(), HashOfAccounts);

        //clears the combo box
        namesBox.removeAllItems();

        //appends all items in the list to the ComboBox
        for (Account organizedListOfAccount : organizedListOfAccounts) {
            namesBox.addItem(organizedListOfAccount.getName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        InputFilter = new javax.swing.JTextField();
        CreateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        namesBox = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(200, 200, 200));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Name/Filter:");

        InputFilter.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        InputFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputFilterActionPerformed(evt);
            }
        });
        InputFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                InputFilterKeyReleased(evt);
            }
        });

        CreateButton.setText("Create");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        namesBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CreateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(InputFilter))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(namesBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(InputFilter)
                    .addComponent(namesBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateButton)
                    .addComponent(DeleteButton))
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void InputFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputFilterActionPerformed
    /**
     * Disables the create button if certain criteria are met
     *
     * @param evt - not used
     */
    private void InputFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputFilterKeyReleased
        //updates the comboBox selection
        updateComboBox();

        String inputtedName = InputFilter.getText();
        //if the input meets a certain condition the create button will be disabled
        if (inputtedName.equals("Player 1")) {
            CreateButton.setEnabled(false);
        } else if (inputtedName.equals("Player 2")) {
            CreateButton.setEnabled(false);
        } else if (inputtedName.equals("Computer1")) {
            CreateButton.setEnabled(false);
        } else if (inputtedName.equals("Computer2")) {
            CreateButton.setEnabled(false);
        } else if (inputtedName.equals("It's a Tie!")) {
            CreateButton.setEnabled(false);
        } else if (inputtedName.length() > 10) {
            CreateButton.setEnabled(false);
        } else if (inputtedName.contains(checkChar1) || inputtedName.contains(checkChar2)) {
            CreateButton.setEnabled(false);
        } else {
            CreateButton.setEnabled(true);
        }

        //checks if the account already exists and disables CreateButton if it does
        if (namesBox.getSelectedItem() != null && namesBox.getSelectedItem().equals(inputtedName)) {
            CreateButton.setEnabled(false);
        }
    }//GEN-LAST:event_InputFilterKeyReleased

    /**
     * Creates a new account and saves it to a file
     *
     * @param evt - not used
     */
    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        //checks if the account doesn't exist. If it does, it creates a new account
        if (HashOfAccounts.get(InputFilter.getText()) == null) {
            HashOfAccounts.put(InputFilter.getText(), new Account(InputFilter.getText()));
        }
        //saves it to a file
        FileManipFunctions.saveFile(HashOfAccounts);
        //updates the comboBox to show new option
        updateComboBox();
        //updates the set account panel and the leaderboards
        updatePanels.setName("asdf");
        //disables the create button
        CreateButton.setEnabled(false);
    }//GEN-LAST:event_CreateButtonActionPerformed

    /**
     * Deletes the selected account
     *
     * @param evt - not used
     */
    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        //if nothing is selected then the button does nothing
        if (namesBox.getSelectedItem() == null) {
            return;
        }

        //if the account exists in the hashmap delete it from the hashmap
        if (HashOfAccounts.get(namesBox.getSelectedItem().toString()) != null) {
            HashOfAccounts.remove(namesBox.getSelectedItem().toString());
        }

        //saves it to the file
        FileManipFunctions.saveFile(HashOfAccounts);

        //updates the combo box and removes the option
        updateComboBox();

        //updates the set account panel and the leaderboards
        updatePanels.setName("asdf");
    }//GEN-LAST:event_DeleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTextField InputFilter;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> namesBox;
    // End of variables declaration//GEN-END:variables
}
